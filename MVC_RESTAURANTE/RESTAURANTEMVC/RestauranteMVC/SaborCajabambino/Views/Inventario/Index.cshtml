@model IEnumerable<SaborCajabambino.Models.Inventario>

@{
    ViewData["Title"] = "Index";
}

<link href="~/css/tablaStyle.css" rel="stylesheet" />
<h1>Inventario</h1>

<div class="row">
    <div class="col-md-4 mt-4" id="detalleInventario">
        <!-- Aquí se cargará la vista parcial -->
    </div>
    <!-- Columna derecha para la tabla -->
    <div class="col-md-8">
            <div class="d-flex align-items-center">
                <!-- Barra de búsqueda -->
                <div class="input-group m-4">
                    <span class="input-group-text bg-white border-end-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.397l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                        </svg>
                    </span>
                    <input type="text" id="searchInput" class="form-control border-start-0" placeholder="Buscar Item...">
                </div>
                <!-- Botón para agregar un nuevo elemento -->
                <a asp-action="Create" class="btn btn-dark d-flex align-items-center rounded-pill">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg me-1" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2z" />
                    </svg>
                    Agregar Nuevo Item
                </a>
            </div>
            <hr />

        <div class="table-responsive-md" style=" max-height: 550px; overflow-y: auto;">
            <table class="table table-hover">
                <thead class="table-dark sticky-top">
                    <tr>
                        <th>
                            Nombre
                        </th>
                        <th>
                            Stock
                        </th>
                        <th>
                            Unidad
                        </th>
                        <th>
                            Estado
                        </th>
                        <th>
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.ItemNombre)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Stock)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UnidadMedida)
                            </td>
                            <td>
                                @if (item.Stock <= item.NivelReorden)
                                {
                                    <span class="badge badge-status bg-warning text-dark">Low Stock</span>
                                }
                                else
                                {
                                    <span class="badge badge-status bg-success">En stock</span>
                                }
                            </td>
                            <td>
                                <span class="badge badge-status bg-warning"><a asp-action="Edit" asp-route-id="@item.IdItem">Editar</a> </span>
                                <span class="badge badge-status bg-info">
                                    <a href="javascript:void(0);" onclick="cargarDetalle(@item.IdItem)">Detalle</a>
                                </span>
                                 <span class="badge badge-status bg-danger"><a asp-action="Delete" asp-route-id="@item.IdItem">Eliminar</a> </span>                                
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@{
    var inventarioSimple = Model.Select(i => new
    {
        idItem = i.IdItem,
        itemNombre = i.ItemNombre,
        stock = i.Stock,
        unidadMedida = i.UnidadMedida,
        nivelReorden = i.NivelReorden,
        idItemCategoriaNavigation = i.IdItemCategoriaNavigation == null ? null : new
        {
            categoria = i.IdItemCategoriaNavigation.Categoria
        }
    }).ToList();
}
@section Scripts {
    <script>
        // Variable para almacenar el caché de inventario
        var inventarioCache = @Json.Serialize(inventarioSimple);

        // Función para cargar los detalles
        function cargarDetalle(id) {
            $.get('/Inventario/Details/' + id, function(data) {
                $('#detalleInventario').html(data);
            });
        }

        // Cargar el primer item al iniciar
        $(document).ready(function() {
            var primerId = @((Model.FirstOrDefault()?.IdItem ?? 0));
            if (primerId > 0) {
                cargarDetalle(primerId);
            }
        });
        // Función para actualizar la tabla con los resultados
        function actualizarTabla(inventario) {
            var tbody = $('table tbody');
            tbody.empty();

            inventario.forEach(function(item) {
                var tr = $('<tr>');
                tr.append($('<td>').text(item.itemNombre));
                tr.append($('<td>').text(item.stock));
                tr.append($('<td>').text(item.unidadMedida));

                // Estado con badge
                var estadoTd = $('<td>');
                if (item.stock <= item.nivelReorden) {
                    estadoTd.append('<span class="badge badge-status bg-warning text-dark">Low Stock</span>');
                } else {
                    estadoTd.append('<span class="badge badge-status bg-success">En stock</span>');
                }
                tr.append(estadoTd);

                // Acciones
                var acciones = $('<td>').append(
                    `<span class="badge badge-status bg-warning"><a href="/Inventario/Edit/${item.idItem}">Editar</a></span> ` +
                    `<span class="badge badge-status bg-info"><a href="javascript:void(0);" onclick="cargarDetalle(${item.idItem})">Detalle</a></span> ` +
                    `<span class="badge badge-status bg-danger"><a href="/Inventario/Delete/${item.idItem}">Eliminar</a></span>`
                );
                tr.append(acciones);

                tbody.append(tr);
            });
        }

        // Función de búsqueda con debounce
        var timeoutId;
        $('#searchInput').on('input', function() {
            clearTimeout(timeoutId);
            var searchTerm = $(this).val().toLowerCase();

            if (searchTerm.length < 3) {
                // Para búsquedas cortas, usa el caché
                var resultados = inventarioCache.filter(i =>
                    i.itemNombre.toLowerCase().includes(searchTerm) ||
                    (i.unidadMedida && i.unidadMedida.toLowerCase().includes(searchTerm)) ||
                    (i.idItemCategoriaNavigation && i.idItemCategoriaNavigation.categoria.toLowerCase().includes(searchTerm))
                );
                actualizarTabla(resultados);
            } else {
                // Para búsquedas más específicas, consulta al servidor
                timeoutId = setTimeout(function() {
                    $.get('/Inventario/Buscar', { searchTerm: searchTerm })
                        .done(function(data) {
                            actualizarTabla(data);
                        });
                }, 300);
            }
        }); 
    </script>
}

